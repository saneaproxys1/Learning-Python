#Задача 1: Создание кортежа
# Создаем кортеж с различными типами данных
my_tuple = (10, "Hello", 3.14, True)
# Выводим кортеж
print(my_tuple)

#Задача 2: Обмен значениями переменных с использованием кортежа
# Исходные значения переменных
a = 5
b = 10
# Обмен значений с использованием кортежа
(a, b) = (b, a)
print(f"После обмена: a = {a}, b = {b}")

#Задача 3: Сложение чисел из двух кортежей
# Создаем два кортежа с числами
tuple1 = (1, 2, 3)
tuple2 = (4, 5, 6)
# Выполняем сложение элементов кортежей
result = (tuple1[0] + tuple2[0], tuple1[1] + tuple2[1], tuple1[2] + tuple2[2])
print("Результат сложения кортежей:")
print(result)

#Задача 4: Проверка наличия элемента в кортеже
# Создаем кортеж с данными
my_tuple = (10, 20, 30, 40, 50)
# Проверяем наличие элемента
search_item = 30
if search_item in my_tuple:
    print(f"Элемент {search_item} найден в кортеже.")
else:
    print(f"Элемент {search_item} не найден в кортеже.")
    
#Задача 5: Извлечение подмножества из кортежа
# Создаем кортеж с данными
my_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
# Извлекаем подмножество элементов по заданным индексам
subset = (my_tuple[2], my_tuple[4], my_tuple[6])
print(f"Подмножество элементов: {subset}")

#Задача 6: Поиск элемента в кортеже
# Создаем кортеж с данными
my_tuple = (10, 20, 30, 40, 50)
# Запрашиваем у пользователя элемент для поиска
search_item = int(input("Введите элемент для поиска: "))
# Проверяем наличие элемента в кортеже
if search_item in my_tuple:
    print(f"Элемент {search_item} найден в кортеже.")
else:
    print(f"Элемент {search_item} не найден в кортеже.")
    
#Задача 7: Фильтрация элементов кортежа
# Создаем кортеж с числами
my_tuple = (15, 30, 25, 10, 35, 20)
# Задаем пороговое значение для фильтрации
threshold = 20
# Фильтруем кортеж
filtered_tuple = tuple(item for item in my_tuple if item > threshold)
print(f"Элементы кортежа больше {threshold}: {filtered_tuple}")

#Задача 8: Поиск минимального значения в кортеже
# Создаем кортеж с числами
my_tuple = (15, 30, 25, 10, 35, 20)
# Находим минимальное значение в кортеже
min_value = min(my_tuple)
print(f"Минимальное значение в кортеже: {min_value}")

#Задача 9: Подсчет элементов в кортеже по условию
# Создаем кортеж с числами
my_tuple = (15, 30, 25, 10, 35, 20)
# Задаем условие для подсчета
threshold = 20
# Подсчитываем количество элементов больше заданного порога
count = sum(1 for item in my_tuple if item > threshold)
print(f"Количество элементов больше {threshold}: {count}")

#Задача 10: Объединение двух кортежей с условием
# Создаем два кортежа с числами
tuple1 = (1, 2, 3, 4, 5)
tuple2 = (3, 4, 5, 6, 7)
# Объединяем кортежи и удаляем дубликаты
merged_tuple = tuple(set(tuple1 + tuple2))
print(f"Объединенный кортеж без дубликатов: {merged_tuple}")

#Задача 11: Вывод элементов кортежа с использованием цикла
# Создаем кортеж с данными
my_tuple = (10, 20, 30, 40, 50)
# Выводим каждый элемент кортежа
for item in my_tuple:
    print(item)
    
#Задача 12: Суммирование элементов кортежа с использованием цикла
# Создаем кортеж с числами
my_tuple = (15, 30, 25, 10, 35)
# Вычисляем сумму элементов кортежа
total_sum = 0
for item in my_tuple:
    total_sum += item
print(f"Сумма элементов кортежа: {total_sum}")

#Задача 13: Поиск минимального значения в кортеже с использованием цикла
# Создаем кортеж с числами
my_tuple = (15, 30, 25, 10, 35)
# Находим минимальное значение в кортеже
min_value = my_tuple[0]  # Предполагаем, что первый элемент минимальный
for item in my_tuple:
    if item < min_value:
        min_value = item
print(f"Минимальное значение в кортеже: {min_value}")

#Задача 14: Фильтрация элементов кортежа с использованием цикла
# Создаем кортеж с числами
my_tuple = (15, 30, 25, 10, 35)
# Задаем пороговое значение для фильтрации
threshold = 20
# Фильтруем кортеж
filtered_tuple = ()
for item in my_tuple:
    if item > threshold:
        filtered_tuple += (item,)
print(f"Элементы кортежа больше {threshold}: {filtered_tuple}")

#Задача 15: Объединение двух кортежей с использованием цикла
# Создаем два кортежа с числами
tuple1 = (1, 2, 3)
tuple2 = (4, 5, 6)
# Объединяем кортежи с помощью цикла
merged_tuple = ()
for item in tuple1 + tuple2:
    merged_tuple += (item,)
print(f"Объединенный кортеж: {merged_tuple}")

